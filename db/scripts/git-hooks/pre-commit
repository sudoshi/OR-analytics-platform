#!/bin/bash

# Pre-commit hook for database schema versioning
# This script:
# 1. Detects schema changes
# 2. Generates migration files if needed
# 3. Updates schema metadata

set -e  # Exit on error

# Configuration
DB_HOST=${PGHOST:-localhost}
DB_PORT=${PGPORT:-5432}
DB_NAME=${PGDATABASE:-oap_db}
DB_USER=${PGUSER:-postgres}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Helper functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to get current Git branch
get_current_branch() {
    git rev-parse --abbrev-ref HEAD
}

# Function to get staged SQL files
get_staged_sql_files() {
    git diff --cached --name-only --diff-filter=ACMR | grep "\.sql$" || true
}

# Function to get schema name from file path
get_schema_name() {
    local file=$1
    if [[ $file =~ db/schemas/init/([0-9]{3})-([^/]+)/ ]]; then
        echo "${BASH_REMATCH[2]}"
    elif [[ $file =~ db/schemas/migrations/([^/]+)/ ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        echo "public"
    fi
}

# Function to generate migration filename
generate_migration_name() {
    local schema=$1
    local description=$2
    local timestamp=$(date +%Y%m%d-%H)
    local count=1
    local migration_dir="db/schemas/migrations/${schema}"
    
    # Create migrations directory if it doesn't exist
    mkdir -p "$migration_dir"
    
    # Find next available number for this hour
    while [[ -f "${migration_dir}/${timestamp}-$(printf "%02d" $count)-${description}.sql" ]]; do
        ((count++))
    done
    
    echo "${timestamp}-$(printf "%02d" $count)-${description}.sql"
}

# Function to check if schema changes require migration
check_schema_changes() {
    local schema=$1
    local changes
    
    # Query for schema changes
    changes=$(psql -h "$DB_HOST" -p "$DB_PORT" -d "$DB_NAME" -U "$DB_USER" -t -c \
        "SELECT * FROM public.detect_schema_changes('$schema')")
    
    if [[ -n "$changes" ]]; then
        log_warn "Schema changes detected in $schema schema:"
        echo "$changes"
        return 0
    else
        log_info "No schema changes detected in $schema schema"
        return 1
    fi
}

# Function to generate migration file
generate_migration() {
    local schema=$1
    local description=$2
    local migration_name=$(generate_migration_name "$schema" "$description")
    local migration_path="db/schemas/migrations/${schema}/${migration_name}"
    local current_state
    
    # Get current schema state
    current_state=$(psql -h "$DB_HOST" -p "$DB_PORT" -d "$DB_NAME" -U "$DB_USER" -t -c \
        "SELECT object_definition FROM public.schema_metadata WHERE schema_name = '$schema'")
    
    # Create migration file
    cat > "$migration_path" << EOF
/*
Description: Auto-generated migration for $schema schema changes
Dependencies: Previous migrations
Author: $(git config user.name)
Date: $(date +%Y-%m-%d)
*/

BEGIN;

-- Changes detected by schema version tracking
$(echo "$current_state" | sed 's/^/-- /')

-- TODO: Replace these comments with appropriate migration SQL
-- Forward migration steps:
-- 1. ...
-- 2. ...

-- Verification steps:
-- 1. ...
-- 2. ...

COMMIT;

/*
Rollback instructions:
To rollback this migration, run:

BEGIN;
-- TODO: Add rollback steps
-- 1. ...
-- 2. ...
COMMIT;
*/
EOF

    log_info "Generated migration file: $migration_path"
    git add "$migration_path"
}

# Main pre-commit hook logic
main() {
    local staged_files
    local current_branch
    local schema
    
    log_info "Running database schema version check..."
    
    # Get staged SQL files
    staged_files=$(get_staged_sql_files)
    if [[ -z "$staged_files" ]]; then
        log_info "No SQL files staged for commit"
        exit 0
    fi
    
    # Get current branch
    current_branch=$(get_current_branch)
    
    # Process each staged SQL file
    while IFS= read -r file; do
        schema=$(get_schema_name "$file")
        log_info "Processing changes for schema: $schema"
        
        # Check for schema changes
        if check_schema_changes "$schema"; then
            # Generate migration if needed
            read -p "Generate migration for $schema schema changes? [Y/n] " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                read -p "Enter brief description for migration: " description
                generate_migration "$schema" "${description// /_}"
            fi
        fi
        
        # Update Git metadata in schema_metadata
        psql -h "$DB_HOST" -p "$DB_PORT" -d "$DB_NAME" -U "$DB_USER" -c \
            "SELECT public.update_git_metadata('$schema', '$(git rev-parse HEAD)', '$current_branch')"
    done <<< "$staged_files"
    
    log_info "Schema version check completed"
}

# Run main function
main
